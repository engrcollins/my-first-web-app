[
  {
    "Title": "<a href='archive-topic.html' target='_blank'>Ten Lessons I learned While Teaching Myself To Code</a>",
    "Category": "Programming",
    "Content": "The following is a guest post by Clive Thompson (@pomeranian99), a journalist who’s written about technology and science for two decades. Clive is a longtime contributing writer for the New York Times Magazine and a columnist for Wired.\r\n\r\nIn his guest post, Clive outlines the most important lessons he learned teaching himself to code after interviewing 200+ programmers for his new book Coders: The Making of a New Tribe and the Remaking of the World.\r\n\r\nEnter Clive…\r\nSo, you want to learn to code.\r\n\r\nJoin the club! We live in a time when, as the venture capitalist Marc Andreessen famously put it, “…software is eating the world.” So the people who know how to program are in a catalytic spot; they can make things happen. Maybe you’ve watched this from the sidelines and thought: Huh. Could I learn to do that? Perhaps you’re out of school; maybe you can’t afford either the money or the time to go back and do a four-year degree in computer science. You’ve seen a zillion of these online tutorials in coding. Could you just sort of, well, teach yourself?\r\n\r\nThe short answer is: Sure you can.\r\n\r\nThe longer answer is… the rest of this essay.\r\n\r\nThe reason why I think you can do it is that I’ve met tons of people who did. I’m a science journalist who spent three years interviewing about 200 programmers for my upcoming book Coders: The Making of a New Tribe and the Remaking of the World. The bulk of them had studied computer science, but a surprisingly significant minority were self-taught. They were artists or accountants or speechwriters or marketers or musicians or carpenters or stay-at-home parents or people from just about any walk of life, but they’d gotten interested in coding, buckled down, and learned.\r\n\r\n",
    "Source": "The Tim Ferriss Show",
    "URL": "<a href='https://tim.blog/2019/03/21/learn-to-code/' target='_blank'>https://tim.blog/2019/03/21/learn-to-code/</a>",
    "Author": "Clive Thompson",
    "Tags": "code, coding, technology, dev-ops",
    "Date": "date"
  },
  {
    "Title": "Json (javascript) encoder and decoder",
    "Category": "Programming",
    "Content": "Json encoder and decoder tool computes json encoded and decoded strings for the given text. Json encoding (javascript encoding) is required to pass data in json request. Json encoding escapes \" by prefixing it with \\ and encloses the result in double quotes. Json decoding does the reverse and is only shown when decoding is possible (original string must be enclosed in double quotes).",
    "Source": "InfoByIp.com (Internet Tools)",
    "URL": "<a href='https://www.infobyip.com/jsonencoderdecoder.php' target='_blank'>https://www.infobyip.com/jsonencoderdecoder.php</a>",
    "Author": "admin",
    "Tags": "code, coding, json, javascript",
    "Date": "date"
  },
  {
    "Title": "Reading and Writing JSON Files with Node.js",
    "Category": "Programming",
    "Content": "One of the best ways to exchange information between applications written in different languages is to use the JSON (JavaScript Object Notation) format. Thanks to its uniformity and simplicity, JSON has almost completely replaced XML as the standard data exchange format in software, particularly in web services.\r\n\r\nGiven the extensive use of JSON in software applications, and especially JavaScript-based applications, it is important to know how to read and write JSON data to a file in Node.js. In this article we'll explain how to perform these functions.\r\n\r\nReading a JSON File\r\nLet's first see how we can read a file that has already been created. But before we do that we need to actually create the file. Open a new window in your favorite text editor and add the following text to it:\r\n\r\n{ \r\n    \"name\": \"Sara\",\r\n    \"age\": 23,\r\n    \"gender\": \"Female\",\r\n    \"department\": \"History\",\r\n    \"car\": \"Honda\"\r\n}\r\nNow save this file as \"student.json\" to your project directory.\r\n\r\nTo read the JSON data from the file we can use the Node.js fs module. There are two functions available in this module that we can use to read files from the file system: readFile and readFileSync.\r\n\r\nAlthough both of these functions perform similar tasks i.e. reading files from disk, the difference lies in the way these functions are actually executed, which we'll explain in more detail in the sections below.\r\n\r\nUsing fs.readFileSync\r\nThe readFileSync function reads data from a file in a synchronous manner. This function blocks the rest of the code from executing until all the data is read from a file. The function is particularly useful when your application has to load configuration settings before it can perform any other tasks.\r\n\r\nTo continue with our example, let's use this function to read the \"student.json\" file that we created earlier, using the readFileSync function. Add the following code to a '.js' file:\r\n\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\n\r\nlet rawdata = fs.readFileSync('student.json');\r\nlet student = JSON.parse(rawdata);\r\nconsole.log(student);\r\nIn the above Node.js code we first load the fs module to our application. Next we use the readFileSync function and pass it the relative file path to the file that we want to read. If you print the object rawdata to the console, you will see raw data (in a Buffer) on the console screen:\r\n\r\n<Buffer 7b 20 0a 20 20 20 20 22 6e 61 6d 65 22 3a 20 22 53 61 72 61 22 2c 0a 20 20 20 20 22 61 67 65 22 3a 20 32 33 2c 0a 20 20 20 20 22 67 65 6e 64 65 72 22 ... >\r\nHowever, we want to read the file in its JSON format, not the raw hex data. This is where the JSON.parse function comes into play. This function handles parsing the raw data, converts it to ASCII text, and parses the actual JSON data in to a JavaScript object. Now, if you print the student object on the console, you will get the following output:\r\n\r\n{ name: 'Sara',\r\n  age: 23,\r\n  gender: 'Female',\r\n  department: 'History',\r\n  car: 'Honda' }\r\nAs you can see, the JSON from our file was successfully loaded in to the student object.\r\n\r\nUsing fs.readFile\r\nAnother way you can read a JSON file in Node.js is using the readFile function. Unlike readFileSync function, the readFile function reads file data in an asynchronous manner. When a readFile function is called, the file reading process starts and immediately the control shifts to next line executing the remaining lines of code. Once the file data has been loaded, this function will call the callback function provided to it. This way you aren't blocking code execution while waiting for the operating system to get back to you with data.\r\n\r\nIn our example, the readFile function takes two parameters: The path to the file that is to be read and the callback function that is to be called when the file is read completely. You can optionally also include a parameter with options, but we won't be covering those in this article.\r\n\r\nTake a look at the following example to understand how to use the readFile function.\r\n\r\n\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\n\r\nfs.readFile('student.json', (err, data) => {\r\n    if (err) throw err;\r\n    let student = JSON.parse(data);\r\n    console.log(student);\r\n});\r\n\r\nconsole.log('This is after the read call');\r\nThe code above does exactly what our previous code snippet did (with an extra console.log call), but it does so asynchronously. Here are a few of the differences, which you may have noticed:\r\n\r\n(err, data) => {}: This is our callback function that is executed once the file is completely read\r\nerr: Since we can't easily use try\/catch with asynchronous code, the function instead gives us an err object if something goes wrong. It is null if there were no errors\r\nYou may have also noticed that we print a string to the console immediately after calling readFile. This is to show you the behavior of asynchronous code. When the above script is executed, you will see that this console.log executes before the readFile callback function executes. This is because readFile does not block code from executing while it reads data from the file system.\r\n\r\nThe output of the code will look like this:\r\n\r\nThis is after the read call\r\n{ name: 'Sara',\r\n  age: 23,\r\n  gender: 'Female',\r\n  department: 'History',\r\n  car: 'Honda' }\r\nAs you can see, the last line of code in our file is actually the one that shows up first in the output.\r\n\r\nUsing require\r\nAnother approach is to use the global require method to read and parse JSON files. This is the same method you use to load Node modules, but it can also be used to load JSON.\r\n\r\nTake a look at the following example.\r\n\r\nSubscribe to our Newsletter\r\nGet occassional tutorials, guides, and jobs in your inbox. No spam ever. Unsubscribe at any time.\r\n\r\nNewsletter Signup\r\nEnter your email...\r\n'use strict';\r\n\r\nlet jsonData = require('.\/student.json');\r\n\r\nconsole.log(jsonData);\r\nIt works exactly like the readFileSync code we showed above, but it is a globally available method that you can use anywhere, which has its advantages.\r\n\r\nHowever there are a few drawbacks of require function:\r\n\r\nRequire is synchronous function and is called only once, which means the calls receive a cached result. If the file is updated you can't re-read it using this method\r\nYour file must have '.json' extension, so it can't be as flexible. Without the proper extension require doesn't treat the file as JSON file.\r\nWriting JSON to a File\r\nSimilar to the readFile and readFileSync functions, there are two functions for writing data to files: writeFile and writeFileSync. As the names suggest, the writeFile method writes data to a file in an asynchronous way while writeFileSync function writes data to a file in a synchronous manner.\r\n\r\nWe'll take a closer look in the following sections.\r\n\r\nUsing fs.writeFileSync\r\nThe writeFileSync function accepts 2-3 parameters: The path of the file to write data to, the data to write, and an optional parameter.\r\n\r\nNote that if the file doesn't already exist, then a new file is created for you. Take a look at the following example:\r\n\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\n\r\nlet student = { \r\n    name: 'Mike',\r\n    age: 23, \r\n    gender: 'Male',\r\n    department: 'English',\r\n    car: 'Honda' \r\n};\r\n \r\nlet data = JSON.stringify(student);\r\nfs.writeFileSync('student-2.json', data);\r\n\r\nIn the above example we are storing our JSON object student to a file named \"student-2.json\". Notice that here we have to use the JSON.stringify function before saving the data. Just like we needed to parse the data into JSON format when we read the JSON file, we need to \"stringify\" the data before we can store it in a string form in the file.\r\n\r\nExecute the above code and open the \"student-2.json\" file. You should see following content in the file:\r\n\r\n{\"name\":\"Mike\",\"age\":23,\"gender\":\"Male\",\"department\":\"English\",\"car\":\"Honda\"}\r\nAlthough this is the data that we wanted to write, the data is in the form of one line of string, which is difficult for us to read. If you'd like the serialized JSON to be human readable, then change the JSON.Stringify function as follows:\r\n\r\nlet data = JSON.stringify(student, null, 2);\r\nHere we are telling the method to add newlines and a couple of indentations to the serialized JSON. Now if you open the \"student-2.json\" file, you should see the text in following format.\r\n\r\n{\r\n  \"name\": \"Mike\",\r\n  \"age\": 23,\r\n  \"gender\": \"Male\",\r\n  \"department\": \"English\",\r\n  \"car\": \"Honda\"\r\n}\r\nUsing fs.writeFile\r\nAs I mentioned earlier, the writeFile function executes in asynchronous manner, which means our code is not blocked while data is written to the file. And just like the asynchronous methods from before, we need to pass a callback to this function.\r\n\r\nLet's write another file, \"student-3.json\", using the writeFile function.\r\n\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\n\r\nlet student = { \r\n    name: 'Mike',\r\n    age: 23, \r\n    gender: 'Male',\r\n    department: 'English',\r\n    car: 'Honda' \r\n};\r\n \r\nlet data = JSON.stringify(student, null, 2);\r\n\r\nfs.writeFile('student-3.json', data, (err) => {\r\n    if (err) throw err;\r\n    console.log('Data written to file');\r\n});\r\n\r\nconsole.log('This is after the write call');\r\nThe output of the above script will be:\r\n\r\nThis is after the write call\r\nData written to file\r\nAnd again, you can see that the last line of our code actually shows up first in the console since our callback hasn't been called yet. This ends up saving quite a bit of execution time if you have large amounts of data to write to your file, or if you have quite a few files to write to.\r\n\r\nLearn More\r\nWant to learn more about the fundamentals of Node.js? Personally, I'd recommend taking an online course like Learn Node.js by Wes Bos. Not only will you learn the most up-to-date ES2017 syntax, but you'll get to build a full stack restaurant app. In my experience, building real-world apps like this is the fastest way to learn.\r\n\r\nConclusion\r\nThroughout this article we showed how you can read and write JSON data from and to files, which is a very common and important task to know how to do as a web programmer.\r\n\r\nThere are a couple of methods in the fs module both for reading from and writing to JSON files. The readFile and readFileSync functions will read JSON data from the file in an asynchronous and synchronous manner, respectively. You can also use the global require method to handle reading\/parsing JSON data from a file in a single line of code. However, require is synchronous and can only read JSON data from files with '.json' extension.\r\n\r\nSimilarly, the writeFile and writeFileSync functions from the fs module write JSON data to the file in an asynchronous and synchronous manner respectively.",
    "Source": "Stack Abuse",
    "URL": "<a href='https://stackabuse.com/reading-and-writing-json-files-with-node-js/' target='_blank'>https://stackabuse.com/reading-and-writing-json-files-with-node-js/</a>",
    "Author": "Scott Robinson",
    "Tags": "node.js, json, server, JavaScript, backend",
    "Date": "date"
  },
  {
    "Title": "Mr",
    "Category": "Coding",
    "Content": "I love Coding",
    "Source": "HPEnvyM6",
    "URL": "mccollins.com",
    "Author": "Mccollins",
    "Tags": "coding, json, web dev, dev-ops",
    "Date": "myDate"
  },
  {
    "Title": "",
    "Category": "",
    "Content": "",
    "Source": "",
    "URL": "",
    "Author": "",
    "Tags": "",
    "Date": ""
  }
]
